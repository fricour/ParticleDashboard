---
sql:
  taxo: ./.observablehq/cache/taxo_data.parquet
  particle: ./.observablehq/cache/LPM_vertical_data.parquet
---

```js
const taxo_data = FileAttachment("taxo_data.parquet").parquet();
const particle_data = FileAttachment("LPM_vertical_data.parquet").parquet();

display(Inputs.table(particle_data));
```

```js
//
// declaration of key variables
//

// particle size classes
const lpm_classes = [50.8, 64, 80.6, 102, 128, 161, 203, 256, 323, 406, 512, 645, 813, 1020, 1290, 1630, 2050, 2580]

// wmos (unique id for BGC-Argo floats)
const wmo = [1902578, 1902593, 1902601, 1902637, 1902685, 2903783, 2903787, 2903794, 3902471, 3902498, 4903634, 4903657, 4903658, 4903660, 4903739, 4903740, 5906970, 6904240, 6904241, 6990503, 6990514, 7901028]

// taxonomic name
const taxo_class = ['Acantharia', 'Actinopterygii', 'Appendicularia', 'Aulacanthidae', 'Calanoida', 'Chaetognatha', 'Collodaria', 'Creseis', 'Foraminifera', 'Rhizaria', 'Salpida', 'artefact', 'crystal', 'detritus', 'fiber', 'other<living', 'puff', 'small<Cnidaria', 'solitaryglobule', 'tuff']
```

```js
//
// input declarations
//
// define user inputs
const pickSizeClass = view(
  Inputs.select(
    lpm_classes,
    {
      multiple: false,
      label: "Size class (Âµm)",
      unique: true,
      sort: false,
      value: 102
    }
  )
);

const pickFloat = view(
  Inputs.select(
   wmo,
    {
      multiple: 5,
      label: "Float WMO",
      unique: true,
      sort: false,
      value: [1902578]
    }
  )
);

const pickTaxo = view(
    Inputs.select(
    taxo_class,
    {
        multiple: false,
        label: "Taxonomic class",
        unique: true,
        sort: false,
        value: 'detritus'
    }
  )
);

const depthRange = view(Inputs.form({
  minDepth: Inputs.range([0, 2000], {label: "Min Depth (m)", step: 100, value: 0}),
  maxDepth: Inputs.range([0, 2000], {label: "Max Depth (m)", step: 100, value: 2000})
})
);
```

```js
const taxo_filtered = await sql([`SELECT *  
                                  FROM taxo
                                  WHERE taxo_class = '${pickTaxo}'
                                  AND wmo IN (${[pickFloat]})`])

const particle_filtered = await sql([`SELECT *
                                     FROM particle
                                     WHERE size IN (${[pickSizeClass]}) 
                                     AND depth > ${depthRange.minDepth}
                                     AND depth < ${depthRange.maxDepth}
                                     AND wmo IN (${[pickFloat]})`])
```

```js
// Create a continuous color scale
const colorScale = d3.scaleSequential(d3.interpolateViridis)
  .domain([0, 100]);  // Adjust this domain to match your data range
```

```js
const taxo_plot = Plot.plot({
  marks: [
    Plot.dot(taxo_filtered, {
      y: "depth",
      x: "juld",
      fill: "concentration_total",
      stroke: "black",
      r: 5,
      opacity: 0.5,
    }),
    Plot.tip(taxo_filtered, Plot.pointer({
      y: "depth",
      x: "juld",
      title: d => `WMO: ${d.wmo}`
    })),
    Plot.crosshair(taxo_filtered, {x: "juld", y: "depth"})
  ],
  color: {
    type: "sequential",
    scheme: "viridis",  // You can also use "plasma", "inferno", or "magma"
    legend: true
  },
  style: {
    background: "black",
    color: "white"  // Text color
  },
  y: {
    label: "Depth (m)",  // Changed from "Concentration (#/L)" to "Depth (m)"
    reverse: true
  },
  x: {
    label: "Date"
  },
  width: 800,
  height: 500,
  style: {
    fontFamily: "sans-serif",
    fontSize: 12
  },
  marginRight: 100
});
```

```js
const particle_plot = Plot.plot({
  marks: [
    Plot.dot(particle_filtered, {
      z: "concentration",
      y: "depth",
      x: "juld",
      r: 5,
      fill: d => d.concentration > 0 ? d.concentration : null,  // Avoid log(0) or negative values
    }),
    Plot.tip(particle_filtered, Plot.pointer({
      y: "depth",
      x: "juld",
      title: d => `Concentration: ${d.concentration.toFixed(2)} #/L`
    })),
  ],
  y: {
    label: "Depth (m)",  // Changed from "Concentration (#/L)" to "Depth (m)"
    reverse: true
  },
  x: {
    label: "Date"
  },
  width: 800,
  height: 500,
  style: {
    fontFamily: "sans-serif",
    fontSize: 12
  },
  marginRight: 100
});
```



${particle_plot}
